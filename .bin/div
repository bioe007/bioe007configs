#!/bin/bash
#
# div
#
# easy diff visible in vimpager
#
# wrote because i'm too lazy to type `diff -wu $1 $2 | vimpager` for all
# those pacnew files
#
# perry hargrave >perrydothargraveatgmaildotcom<
# aka bioe007
#
SELFNAME="`basename $0`"
DIFFCMD=${DIFFCMD:-`which diff`}
DIFFOPTS=${DIFFOPTS:-"wu"}
PGR=${PAGER:-`which less`}
PACSEARCHPATH="/etc"

usage() {
    cat << EOF >&2
Usage as diff substitute:
    $SELFNAME [diff options] [$SELFNAME options] <file1> <file2>

    This invokes:
        basecmd=$DIFFCMD -$DIFFOPTS <file1> <file2>| $PGR

            (*current settings shown)

    Arguments to 'diff' can be passed just like normal, $SELFNAME assumes
    diff -wu by default.

Usage for pacman:
    $SELFNAME [-P|--Pac]

    This invokes a find operation to look for files suffixed with '.pacnew'
    in the /etc directory. Each pair of foo.conf and foo.conf.pacnew are
    diff'ed and displayed in the \$PAGER

$SELFNAME options:
    --nobatch   : do not batch diff files together in \$PAGER
                    instead view each separately in \$PAGER

    --outfile=<file>  : Write diffs to <file> instead of default
                        This file is not automatically deleted on
                        exit.
                        If <file> exists then it will be appended to
                        NOT overwritten.
                        *This forces batched mode*

    Comments or suggestions to perry.hargrave@gmail.com
EOF
}


error() {
# if given a 2nd parameter this will not kill the script
    echo "ERROR: $SELFNAME: $1"
    test "$2" && return\
        || echo "ERROR: $SELFNAME: giving up..."

    if [ -e "$TMPFILE" ]; then
        rm $TMPFILE
    fi
    exit 1
}


dodiff() {
    # current file index and number of files
    i_diff="0"
    i_last=${#fileList[*]}

    # don't try and diff an odd number of files
    let "modulo=$i_last % 2"
    if (("$modulo")); then error "Odd number of files given"; fi

    # test for batch mode
    if (("$BATCH")) || (("$OUTFILE")); then
        BATCH=1
        TMPFILE="${OUTFILE:-/tmp/${SELFNAME}.${USER}.${RANDOM}.diff}"
        touch $TMPFILE || error "Couldn't write to $TMPFILE"
    fi

    # iterate the pairs in the file list
    while [ $i_diff -lt $i_last ]; do

        # both files must be readable by the user
        if [ -r "${fileList[$i_diff]}" ] && \
            [ -r "${fileList[$((i_diff+1))]}" ] ; then

            # if --nobatch IS NOT specified or --outfile IS
            # then batch the diffs
            if (("$BATCH")) ; then
                echo "$SELFNAME: \`$DIFFCMD -$DIFFOPTS ${fileList[$i_diff]} ${fileList[$((i_diff+1))]} >> $TMPFILE'"\
                    | tee -a "$TMPFILE"

                $DIFFCMD -$DIFFOPTS "${fileList[$i_diff]}" "${fileList[$((i_diff+1))]}" >> "$TMPFILE"

            else

                echo "$SELFNAME: \`$DIFFCMD -$DIFFOPTS ${fileList[$i_diff]} ${fileList[$((i_diff+1))]} | $PGR'"
                $DIFFCMD -$DIFFOPTS ${fileList[$i_diff]} ${fileList[$((i_diff+1))]} | $PGR
            fi
            

            # increment file counter
            i_diff=$((i_diff+2))

        else
            error "Could not read ${fileList[$i_diff]} : skipping" "1"
            i_diff=$((i_diff+2))
            continue
        fi
    done
    

    if [ -e "$TMPFILE" ]; then
        $PGR $TMPFILE

        # remove the file if user doesn't specify --outfile
        if [ -z "$OUTFILE" ]; then
            rm "$TMPFILE" || error "Couldn't delete $TMPFILE"
        fi
    fi

    # done
    exit 0
}


pacmode() {

    echo "$SELFNAME: pacman mode... looking for *.pacnew in /etc/"

    i_pfiles=0
    while read line ; do
        echo "$SELFNAME: Found $line"
        fileList[$i_pfiles]="${line%.pacnew}"
        i_pfiles=$((i_pfiles+1))

        fileList[$i_pfiles]="$line"
        i_pfiles=$((i_pfiles+1))

    done < <(find /etc -type f -regex ".*pacnew" )

}


SW="1"
iFile=0
fileList[$iFile]=""
unset BATCH
BATCH=1

# cli option parsing

if [ "$#" -lt "1" ]; then
    usage
    error "No command specified"
fi

while [ "$#" -gt "0" ]; do
    case "$1" in

        # parse options
        -* )

        if [ "$1" == ".-Pac" ] || [ "$1" == "-P" ] ; then
            DOPAC=1
        elif [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then
            usage
            exit 1
        elif [ "$1" == "--nobatch" ] ; then
            if [ -z "$OUTFILE" ]; then
                BATCH=0
            else
                error "--nobatch and --outfile are exclusive options"
            fi
        elif [[ "$1" =~ "outfile" ]]; then # ! -z "${1##--outfile=}" ] ; then

            if ((BATCH)); then
                touch "${1##--outfile=}"\
                    && OUTFILE="${1##--outfile=}"\
                    || error "Couldn't write to $1"
            else
                error "--nobatch and --outfile are exclusive options"
            fi
        else
            DIFFOPTS=${1#-*}
        fi
        ;;


        # check files
        * )
            if [ -r "$1" ] ; then
                fileList[$iFile]="$1"
                iFile=$((iFile+1))
            else
                error "Can't parse command or file: \`$1'"
                usage
                exit 1
            fi
        ;;
    esac

    shift $SW
done


if [[ "$DOPAC" ]] ; then
    pacmode
fi

dodiff

