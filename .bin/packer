#!/bin/bash
# Copyright Matthew Bruenig <matthewbruenig@gmail.com>
# Licensed under GPL version 3

tmpfile="/tmp/packeroutput-$UID"
makepkgconf="/etc/makepkg.conf"
pacmanconf="/etc/pacman.conf"
pacman="$(type -p pacman)"
outputpacman="$(type -p pacman-color)"
if [[ $outputpacman ]]; then
  COLOR1='\e[1;39m'
  COLOR2='\e[1;32m'
  COLOR3='\e[1;35m'
  COLOR4='\e[1;36m'
  COLOR5='\e[1;34m'
  COLOR6='\e[1;33m'
  ENDCOLOR='\e[0m'
else
  outputpacman="$pacman"
fi

err() {
  echo -e "$1"
  exit 1
}

usage() {
  echo "usage: packer [option] [package] [package] [...]"
  echo
  echo "    -S          - installs package"
  echo "    -Syu|-Su    - updates all packages"
  echo "    -Ss         - searches for package"
  echo "    -Si         - outputs info for package"
  echo
  echo "    --noconfirm - do not prompt for confirmation"
  echo "    --auronly   - only do actions for aur"
  echo "    --devel     - update devel packages during -Su"
  echo "    --skipinteg - when using makepkg, do not check md5s"
  echo "    -h          - outputs this message"
  exit
}

# Called whenever anything needs to be run as root ($@ is the command)
runasroot() {
  if [[ $UID -eq 0 ]]; then
    "$@"
  elif sudo -l "$@" &>/dev/null; then
    sudo "$@"
  else
    echo -n "root "
    # Hack: need to echo to make sure all of the args get in the single set of quotes
    su root -c "$(echo $@)"
  fi
}

# Source makepkg.conf file
sourcemakepkgconf() {
  . "$makepkgconf"
}

# Parse IgnorePkg from pacman.conf, put in globally accessible ignoredpackages array
getignoredpackages() {
  IFS=$'\n'
  IFS="$IFS "
  ignoredpackages=( $(grep '^IgnorePkg' "$pacmanconf" | cut -d '=' -f 2) )
}

# Checks to see if $1 is an ignored package
isignored() {
  [[ " ${ignoredpackages[@]} " =~ " $1 " ]]
}

# Tests whether $1 exists on the aur
existsinaur() {
  wget -q "http://aur.archlinux.org/rpc.php?type=info&arg=$1" -O "$tmpfile"
  ! grep -Fq ':"No result found"' "$tmpfile"
}

# Tests whether $1 exists in pacman
existsinpacman() {
  $pacman -Si -- "$1" &>/dev/null
}

# Tests whether $1 exists in a pacman group
existsinpacmangroup() {
  [[ $($pacman -Sgq "$1") ]]
}

# Tests whether $1 exists locally
existsinlocal() {
  $pacman -Qq -- "$1" &>/dev/null
}

# Scrapes the aur deps from PKGBUILDS and puts in globally available dependencies array
scrapeaurdeps() {
  wget -q "http://aur.archlinux.org/packages/$1/$1/PKGBUILD" -O "$tmpfile"
  [[ $? -ne 0 ]] && err "Package \`$1' does not exist."
  . "$tmpfile"
  IFS=$'\n'
  dependencies=( $(echo -e "${depends[*]}\n${makedepends[*]}" | sed -e 's/=.*//' -e 's/>.*//' -e 's/<.*//'| sort -u) )
}

# Finds dependencies of package $1
# Sets pacmandeps and aurdeps array, which can be accessed globally after function runs
finddeps() {
  # loop through dependencies, if not installed, determine if pacman or aur deps
  pacmandeps=()
  aurdeps=()
  scrapeaurdeps "$1" 
  missingdeps=( $(pacman -T "${dependencies[@]}") )
  for dep in "${missingdeps[@]}"; do
    if existsinpacman "$dep"; then
      pacmandeps+=("$dep")
    elif existsinaur "$dep"; then
      aurdeps+=("$dep")
    else
      [[ $option = "install" ]] &&  err "Dependency \`$dep' of \`$1' does not exist."
      echo "Dependency \`$dep of \`$1' does not exist."
      return 1
    fi
  done

  # Aur dependencies can also have aur dependencies, so find all of them
  if [[ -n $aurdeps ]]; then
    checkdeps=( "${aurdeps[@]}" )
    while [[ -n $checkdeps ]]; do
      tmpdeps=( "${checkdeps[@]}" )
      checkdeps=()
      for aurdep in "${tmpdeps[@]}"; do
        scrapeaurdeps "$aurdep"
        missingdeps=( $(pacman -T "${dependencies[@]}") )
        for dep in "${missingdeps[@]}"; do
          if ! [[ " $1 ${aurdeps[@]} ${pacmandeps[@]} " =~ " $dep " ]];  then
            if existsinpacman "$dep"; then
              pacmandeps+=("$dep")
            elif existsinaur "$dep"; then
              aurdeps=("$dep" "${aurdeps[@]}")
              checkdeps+=("$dep")
            else
              err "Dependency \`$dep' does not exist."
            fi
          fi
        done
      done
    done
  fi
}

# Displays a progress bar ($1 is numerator, $2 is denominator)
aurbar() {
  # Delete line
  printf "\033[0G"
  
  # Get vars for output
  beginline=" aur"
  beginbar="["
  endbar="] "
  perc="$(($1*100/$2))"
  width="$(stty size)"
  width="${width##* }"
  charsbefore="$((${#beginline}+${#1}+${#2}+${#beginbar}+3))"
  spaces="$((52-$charsbefore))"
  barchars="$(($width-52-${#perc}-3))"
  hashes="$(($barchars*$perc/100))" 
  dashes="$(($barchars-$hashes))"

  # Print output
  printf "$beginline %${spaces}s$1  $2 ${beginbar}" ""
  for ((n=1; n<$hashes; n++)); do
    printf "#"
  done
  for ((n=1; n<$dashes; n++)); do
    printf "-"
  done
  printf "${endbar}${perc}%%"
}

# Checks if package is newer on aur ($1 is package name, $2 is local version)
aurversionisnewer() {
  wget -q "http://aur.archlinux.org/rpc.php?type=info&arg=$1" -O "$tmpfile"
  unset aurversion
  if ! grep -Fq ':"No result found"' "$tmpfile"; then
    aurversion="$(cut -d '"' -f 18 "$tmpfile")"
    if [[ "$(vercmp "$aurversion" "$2")" -gt 0  ]]; then
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

# Installs packages from aur ($1 is package, $2 is dependency or explicit)
aurinstall() {
  dir="/tmp/packer-$UID/$1"

  # Prepare the installation directory
  # If there is an old directory and aurversion is not newer, use old directory
  if . "$dir/$1/PKGBUILD" &>/dev/null && ! aurversionisnewer "$1" "$pkgver"; then
    cd "$dir/$1"
  else
    [[ -d $dir ]] && rm -rf $dir
    mkdir -p "$dir"
    cd "$dir"
    wget "http://aur.archlinux.org/packages/$1/$1.tar.gz"
    tar xf "$1.tar.gz"
    cd "$1"
  fi

  # Allow user to edit PKGBUILD
  if [[ -f PKGBUILD ]]; then
    if ! [[ $noconfirm ]]; then
      echo -n "Edit $1 PKGBUILD with \$EDITOR? [Y/n] "
      read -n 1 answer
      echo
      case "$answer" in
        'Y'|'y'|'')
          [[ $EDITOR ]] || EDITOR=vi
          $EDITOR PKGBUILD
          ;;
      esac
    fi
  else
    err "No PKGBUILD found in directory."
  fi

  # Allow user to edit .install
  unset install
  . PKGBUILD
  if [[ $install ]]; then
    if ! [[ $noconfirm ]]; then
      echo -n "Edit $install with \$EDITOR? [Y/n] "
      read -n 1 answer
      echo
      case "$answer" in
        'Y'|'y'|'')
          [[ $EDITOR ]] || EDITOR=vi
          $EDITOR "$install"
          ;;
      esac 
    fi
  fi

  # Installation (makepkg and pacman)
  if [[ $UID -eq 0 ]]; then
    makepkg $MAKEPKGOPTS --asroot -f
  else
    makepkg $MAKEPKGOPTS -f
  fi

  [[ $? -ne 0 ]] && echo "The build failed." && return 1
  if  [[ $2 = dependency ]]; then
    runasroot $outputpacman --asdeps -U $pkgname-*.pkg.tar.gz
  elif [[ $2 = explicit ]]; then
    runasroot $outputpacman -U $pkgname-*.pkg.tar.gz
  fi
}

# Goes through all of the install tests and execution ($@ is packages to be installed)
installhandling() {
  packageargs=("$@")
  getignoredpackages
  sourcemakepkgconf
  # Figure out all of the packages that need to be installed
  pacmapackages=()
  aurpackages=()
  aurdepends=()
  pacmandepends=()
  for package in "${packageargs[@]}"; do
    # Determine whether package is in pacman repos
    if ! [[ $auronly ]] && existsinpacman "$package"; then
      pacmanpackages+=("$package")
    elif existsinpacmangroup "$package"; then
      pacmanpackages+=("$package")
    else
      # find dependencies
      finddeps "$package"
      aurpackages+=("$package")
      aurdepends+=("${aurdeps[@]}")
      pacmandepends+=("${pacmandeps[@]}")
    fi
  done


  # Check if any aur target packages are ignored
  aurtargets=()
  for package in "${aurpackages[@]}"; do
    if isignored "$package"; then
      echo -ne "${COLOR5}:: ${COLOR1}$package is in IgnorePkg/IgnoreGroup. Install anyway?${ENDCOLOR} [Y/n] "
      if ! [[ $noconfirm ]]; then
        if ! proceed; then
          continue
        fi
      fi
    fi
    aurtargets+=("$package")
  done

  # Check if any aur dependencies are ignored
  for package in "${aurdepends[@]}"; do
    if isignored "$package"; then
      echo -ne "${COLOR5}:: ${COLOR1}$package is in IgnorePkg/IgnoreGroup. Install anyway?${ENDCOLOR} [Y/n] "
      if ! [[ $noconfirm ]]; then
        if ! proceed; then
          echo "Unresolved dependency \`$package'"
          unset aurtargets
          break
        fi
      fi
    fi
  done
 
  # If only pacman packages, then call pacman
  if [[ -n $pacmanpackages && -z $aurtargets ]]; then
    if [[ $noconfirm ]]; then
      runasroot $outputpacman --noconfirm -S -- "${pacmanpackages[@]}"
    else 
      runasroot $outputpacman -S -- "${pacmanpackages[@]}"
    fi
    exit
  elif [[ -n $aurtargets ]]; then
    # First install the explicit pacman packages, let pacman prompt
    if [[ $pacmanpackages ]]; then
      if [[ $noconfirm ]]; then
        runasroot $outputpacman --noconfirm -S -- "${pacmanpackages[@]}"
      else
        runasroot $outputpacman -S -- "${pacmanpackages[@]}"
      fi
    fi

    # Test if aurpackages are already installed; echo warning if so
    for pkg in "${aurtargets[@]}"; do
      if existsinlocal "$pkg"; then
        localversion="$(pacman -Qs "$pkg" | grep -F "local/$pkg" | cut -d ' ' -f 2)"
        if ! aurversionisnewer "$pkg" "$localversion"; then
          echo -e "${COLOR6}warning:$ENDCOLOR $pkg-$localversion is up to date -- reinstalling"
        fi
      fi
    done

    # Prompt for aur packages and their dependencies
    echo
    if [[ $aurdepends ]]; then
      num="$((${#aurdepends[@]}+${#aurtargets[@]}))"
      echo -e "${COLOR6}Aur Targets    ($num):${ENDCOLOR} ${aurdepends[@]} ${aurtargets[@]}"
    else 
      echo -e "${COLOR6}Aur Targets    ($((${#aurtargets[@]}))):${ENDCOLOR} ${aurtargets[@]}"
    fi
    [[ $pacmandepends ]] && echo -e "${COLOR6}Pacman Targets (${#pacmandepends[@]}):${ENDCOLOR} ${pacmandepends[@]}"

    # Prompt to proceed
    echo -en "\nProceed with installation? [Y/n] "
    if ! [[ $noconfirm ]]; then
      proceed || exit
    fi

    # Install pacman dependencies
    if [[ -n $pacmandepends ]]; then
      runasroot $outputpacman --asdeps --noconfirm -S -- "${pacmandepends[@]}" || err "Installation failed."
    fi 

    # Install aur dependencies
    if [[ -n $aurdepends ]]; then
      unset failed
      for dep in "${aurdepends[@]}"; do
        aurinstall "$dep" "dependency"
      done
    fi 

    # Install the aur packages
    for package in "${aurtargets[@]}"; do
      scrapeaurdeps "$package"
      if pacman -T "${dependencies[@]}" &>/dev/null; then
        aurinstall "$package" "explicit"
      else
        echo "Dependencies for \`$package' are not met, not building..."
      fi
    done
  fi
}

# proceed with installation prompt
proceed() {
  read -r
  case "$REPLY" in
    'Y'|'y'|'') return 0 ;;
    *)       return 1 ;;
  esac
}

# Argument parsing
[[ $1 ]] || usage
packageargs=()
while [[ $1 ]]; do
  case "$1" in
    '-S')          option=install ;;
    '-Ss')         option=search ;;
    '-Si')         option=info ;;
    -S*u*)         option=update ; pacmanarg="$1" ;;
    '-h'|'--help') usage ;;
    '--noconfirm') noconfirm='1' ;;
    '--auronly')   auronly='1' ;;
    '--devel')     devel='1' ;;
    '--skipinteg') MAKEPKGOPTS="--skipinteg" ;;
    '--')          shift ; packageargs+=("$@") ; break ;;
    -*)            err "Option \`$1' is not valid." ;;
    *)             packageargs+=("$1") ;;
  esac
  shift
done

# Sanity checks
[[ $option ]] || option="searchinstall"
[[ $option != "update" && -z $packageargs ]] && err "Must specify a package."

# Install (-S) handling
if [[ $option = install ]]; then
  installhandling "${packageargs[@]}"
  exit
fi

# Update (-Su) handling
if [[ $option = update ]]; then
  getignoredpackages
  # Pacman update
  if ! [[ $auronly ]]; then
    if [[ $noconfirm ]]; then
      runasroot $outputpacman --noconfirm "$pacmanarg"
    else
      runasroot $outputpacman "$pacmanarg"
    fi
  fi

  # Aur update
  echo -e "${COLOR5}:: ${COLOR1}Synchronizing aur database...${ENDCOLOR}"
  IFS=$'\n'
  packages=( $(pacman -Qm) )
  newpackages=()
  checkignores=()
  total="${#packages[@]}"
  if [[ $devel ]]; then
    for ((i=0; i<$total; i++)); do 
      aurbar "$((i+1))" "$total"
      if isignored "${packages[$i]%% *}"; then
        checkignores+=("${packages[$i]}")
      else
        unset _darcstrunk _cvsroot _gitroot _svntrunk _bzrtrunk _hgroot
        wget -q "http://aur.archlinux.org/packages/${packages[$i]%% *}/${packages[$i]%% *}/PKGBUILD" -O "$tmpfile"
        [[ $? -eq 0 ]] || continue
        . "$tmpfile"
        if [[ "$(vercmp "$pkgver" "${packages[$i]##* }")" -gt 0 ]]; then
          newpackages+=("${packages[$i]%% *}")
        elif [[ ${_darcstrunk} || ${_cvsroot} || ${_gitroot} || ${_svntrunk} || ${_bzrtrunk} || ${_hgroot} ]]; then 
          newpackages+=("${packages[$i]%% *}")
        fi
      fi
    done
  else
    for ((i=0; i<$total; i++)); do 
      aurbar "$((i+1))" "$total"
      if isignored "${packages[$i]%% *}"; then
        checkignores+=("${packages[$i]}")
      elif aurversionisnewer "${packages[$i]%% *}" "${packages[$i]##* }"; then
        newpackages+=("${packages[$i]%% *}")
    fi
    done
  fi
  echo

  echo -e "${COLOR5}:: ${COLOR1}Starting full aur upgrade...${ENDCOLOR}"

  # Check and output ignored package update info
  for package in "${checkignores[@]}"; do
    if aurversionisnewer "${package%% *}" "${package##* }"; then
      echo -e "${COLOR6}warning:${ENDCOLOR} $package: ignoring package upgrade (${package##* } => $aurversion)"
    fi
  done

  # Now for the installation part
  if [[ $newpackages ]]; then
    sourcemakepkgconf
    echo "resolving dependencies..."
    localpackages=()
    localaurdeps=()
    localpacmandeps=()
    for package in "${newpackages[@]}"; do
      if finddeps "$package"; then
        localpackages+=("$package")
        localaurdeps+=("${aurdeps[@]}")
        localpacmandeps+=("${pacmandeps[@]}")
      else
        echo "Not updating \`$package'."
      fi 
    done

    echo
    if [[ $localaurdeps ]]; then
      num="$((${#localaurdeps[@]}+${#localpackages[@]}))"
      echo -e "${COLOR6}Aur Targets    ($num):${ENDCOLOR} ${localaurdeps[@]} ${localpackages[@]}"
    else 
      num="$((${#localpackages[@]}))"
      echo -e "${COLOR6}Aur Targets    ($num):${ENDCOLOR} ${localpackages[@]}"
    fi
    [[ $localpacmandeps ]] && echo -e "${COLOR6}Pacman Targets ($((${#pacmandeps[@]}))):${ENDCOLOR} ${pacmandeps[@]}"

    # Prompt on whether to proceed
    echo -en "\nProceed with installation? [Y/n] "
    if ! [[ $noconfirm ]]; then
      proceed || exit
    fi

    # Install Pacman Dependencies
    if [[ -n $localpacmandeps ]]; then
      runasroot  $outputpacman --asdeps --noconfirm -S -- "${localpacmandeps[@]}"
    fi

    # Install aur dependencies
    if [[ -n $localaurdeps ]]; then
      for dep in "${localaurdeps[@]}"; do
        aurinstall "$dep" "dependency"
      done
    fi

    # Install updated packages
    for package in "${localpackages[@]}"; do
      scrapeaurdeps "$package"
      if pacman -T "${dependencies[@]}" &>/dev/null; then
        aurinstall "$package" "explicit"
      else
        echo "Dependencies for \`$package' are not met, not building..."
      fi
    done
  else
    echo " local database is up to date"
  fi
fi

# Search (-Ss) handling
if [[ $option = search || $option = searchinstall ]]; then
  # Pacman searching 
  if ! [[ $auronly ]]; then
    if [[ $option = search ]]; then
      $outputpacman -Ss -- "${packageargs[@]}"
    else
      # Get the pacman output into various arrays and output
      pacman -Ss -- "${packageargs[@]}" > "$tmpfile"
      IFS=$'\n' ; repoline=(  $(grep -Fv '    ' "$tmpfile") )
      repo=( "${repoline[@]%%/*}" )
      version=( "${repoline[@]##* }" )
      pacname=( "${repoline[@]##*/}" )
      pacname=( "${pacname[@]%% *}" )
      IFS=$'\a' ; description=( $(sed 's/^[^ ].*/\a/' "$tmpfile") )  
      pactotal="${#pacname[@]}"
      for ((i=0; i<$pactotal; i++)); do
        echo -ne "$i ${COLOR3}${repo[$i]}/${COLOR1}${pacname[$i]} ${COLOR2}${version[$i]}${ENDCOLOR}${description[$((i+1))]}"
      done
      echo
    fi
  else
    pactotal=0
  fi

  # Aur searching and tmpfile preparation
  if  [[ ${#packageargs[@]} -eq 1 ]]; then
    # Fill up the arrays with package information from dump file
    wget -q "http://aur.archlinux.org/rpc.php?type=search&arg=$packageargs" -O- | sed -e 's/","/"\n"/g' -e 's/\\//g' > "$tmpfile" 
    parsefile="$tmpfile"
  else
    wget -q "http://aur.archlinux.org/rpc.php?type=search&arg=$packageargs" -O- | sed -e 's/{/\n{/g' -e 's/\\//g' > "$tmpfile-0"
    for ((i=1 ; i<${#packageargs[@]} ; i++)); do
      grep -e "\"Name\":\".*${packageargs[$i]}.*\",\"Version" -e "\"Description\":\".*${packageargs[$i]}.*\",\"LocationID" "${tmpfile}-$((i-1))" > "$tmpfile-$i"
    done
    sed -e 's/","/"\n"/g' -i "$tmpfile-$((i-1))"
    parsefile="$tmpfile-$((i-1))"
  fi

  # Prepare tmp file and arrays
  IFS=$'\n'
  aurname=( $(grep -F '"Name":"' "$parsefile" | cut -d '"' -f 4) )
  version=( $(grep -F '"Version":"' "$parsefile" | cut -d '"' -f 4) )
  description=( $(grep -F '"Description":"' "$parsefile" | sed -e 's/^"Description":"//' -e 's/"$/ /') )
  aurtotal="${#aurname[@]}"

  # Echo out the -Ss formatted package information
  if [[ $option = search ]]; then
    for ((i=0 ; i<$aurtotal ; i++)); do
      echo -e "${COLOR3}aur/${COLOR1}${aurname[$i]} ${COLOR2}${version[$i]}${ENDCOLOR}\n    ${description[$i]}"
    done
  else
    alltotal="$(($pactotal+$aurtotal))"
    for ((i=$pactotal ; i<$alltotal ; i++)); do
      elem="$(($i-$pactotal))"
      echo -e "$i ${COLOR3}aur/${COLOR1}${aurname[$elem]} ${COLOR2}${version[$elem]}${ENDCOLOR}\n    ${description[$elem]}"
    done
  fi

  # Prompt and install selected numbers
  if [[ $option = searchinstall ]]; then
    pkglist=()
    allpackages=( "${pacname[@]}" "${aurname[@]}" )

    # Prompt for numbers
    echo
    echo -e "${COLOR2}Type numbers to install. Separate each number with a space.${ENDCOLOR}"
    echo -ne "${COLOR2}Numbers: ${ENDCOLOR}"
    read -r
    
    # Parse answer
    if [[ $REPLY ]]; then
      IFS=' '
      for num in $REPLY; do
        if [[ $num -lt $alltotal ]]; then
          pkglist+=("${allpackages[$num]}")
        else
          err "Number \`$num' is not assigned to any of the packages."
        fi
      done
    fi

    # Call installhandling to take care of the packages chosen 
    installhandling "${pkglist[@]}"
  fi

  # Remove the tmpfiles
  rm -f "$tmpfile"*
  exit
fi

# Info (-Si) handling
if [[ $option = info ]]; then
  # Pacman info check
  sourcemakepkgconf
  for package in "${packageargs[@]}"; do
    if ! [[ $auronly ]] && existsinpacman "$package"; then
      $outputpacman -Si -- "$package"
      exit
    else # Check to see if it is in the aur
      wget -q "http://aur.archlinux.org/packages/$package/$package/PKGBUILD" -O "$tmpfile"
      [[ $? -eq 0 ]] || err "No result found."
      . "$tmpfile"

      # Echo out the -Si formatted package information
      # Retrieve each element in order and echo them immediately
      echo -e "${COLOR1}Repository     : ${COLOR3}aur"
      echo -e "${COLOR1}Name           : $pkgname"
      echo -e "${COLOR1}Version        : ${COLOR2}$pkgver-$pkgrel"
      echo -e "${COLOR1}URL            : ${COLOR4}$url"
      echo -e "${COLOR1}Licenses       : ${ENDCOLOR}${license[@]}"

      echo -e "${COLOR1}Groups         : ${ENDCOLOR}${groups[@]:-None}"

      echo -e "${COLOR1}Provides       : ${ENDCOLOR}${provides[@]:-None}"

      echo -e "${COLOR1}Depends On     : ${ENDCOLOR}${depends[@]}"

      echo -e -n "${COLOR1}Optional Deps  : ${ENDCOLOR}"
      len="${#optdepends[@]}"
      if [[ $len -eq 0 ]]; then
        echo "None"
      else
        for ((i=0 ; i<$len ; i++)); do
          if [[ $i = 0 ]]; then
            echo "${optdepends[$i]}"
          else
            echo -e "                 ${optdepends[$i]}" 
          fi
        done
      fi

      [[ -z "${conflicts}" ]] && conflicts="None"
      echo -e "${COLOR1}Conflicts With : ${ENDCOLOR}${conflicts[*]}"

      [[ -z "${replaces}" ]] && replaces="None"
      echo -e "${COLOR1}Replaces       : ${ENDCOLOR}${replaces[*]}"
      echo -e "${COLOR1}Architecture   : ${ENDCOLOR}${arch[*]}"
      echo -e "${COLOR1}Description    : ${ENDCOLOR}$pkgdesc"
      echo
    fi
  done
fi
